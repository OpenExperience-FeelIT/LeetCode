class Solution {
    public int lengthOfLongestSubstring(String s) {
        int len = s.length();
        int n = len;
        int arr[][] = new int[len][len];
        int max = 1;
        for(int i=0; i<len; i++)
         {
             arr[i][i] = 1;
         }
        for(int i=0; i<len-1; i++)
         {
             if(s.charAt(i) == (s.charAt(i+1)))
                 {
                    arr[i][i+1] = 1;
                 max = 2;
                 }
         }
        
       /* for(int i=3; i<=len; ++i) (int k = 3; k <= n; ++k)
        {
            // to reserve the space of required length while checking so that we don't get the Array index out of bound
            
            for(int j=0; j<len-i+1; ++j) (int i = 0; i < n - k + 1; ++i)
            {
                int k = i+j-1;   int j = i + k - 1;
                
                if(s.charAt(j) == (s.charAt(k)) && arr[j+1][k-1] == 1 )
                {
                    arr[j][k] = 1;
                    
                    if(i>max)
                     max = i;
                    
                }
            }
            
        }*/
        for (int k = 3; k <= n; ++k) {
 
            // Fix the starting index
            for (int i = 0; i < n - k + 1; ++i) {
                // Get the ending index of substring from
                // starting index i and length k
                int j = i + k - 1;
 
                // checking for sub-string from ith index to
                // jth index iff str.charAt(i+1) to
                // str.charAt(j-1) is a palindrome
                if (arr[i + 1][j - 1] == 1 && s.charAt(i) == s.charAt(j)) {
                    arr[i][j] = 1;
 
                    if (k > max) {
                    //    start = i;
                        max = k;
                    }
                }
            }
        }
         
        
     return max;   
    }
}
